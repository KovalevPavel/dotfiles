(defwidget bar []
  (centerbox 
    :orientation "h" 
    :height 52 
    (startstuff)
    (music)
    (sidestuff)
  )
)

(defwidget startstuff []
  (box 
    :class "startstuff" 
    :orientation "h" 
    :space-evenly false 
    :halign "start" 
    :spacing 30
    (workspaces :desktops desktop_list :focused focused_desktop)
    (tray)
  )
)

(defwidget sidestuff []
  (box :class "sidestuff" :orientation "h" :space-evenly false :halign "end"
    (metric 
      :label "ðŸ”Š"
      :value volume
      :onchange "amixer -D pulse sset Master {}%")
    (metric 
      :label "ðŸ’¾"
      :value {EWW_RAM.used_mem_perc}
      :onchange "")
    (metric 
      :label "ðŸ’¿"
      :value {round((1 - (EWW_DISK["/"].free / EWW_DISK["/"].total)) * 100, 0)}
      :onchange "")
    time))

(defwidget workspaces [desktops focused]
  (box 
    :class "workspaces"
    :orientation "h"
    :space-evenly true
    :halign "start"
    :spacing 10
    (for entry in desktops
      (eventbox
        :class `workspace_container ${focused == jq(entry, '.id', 'r') ? "selected" 
             : jq(entry, '.has_windows', 'r') == "true" ? "filled" : "" }`
        :onclick "bspc desktop -f ${jq (entry, '.id', 'r')}" {jq (entry, '.name', 'r')}))
  )
)

(defwidget tray []
  (box 
    :class "tray"
    :orientation "h"
    :space-evenly false 
  (lang)
  (systray
    :class "systray"
    :orientation "h"
    :spacing 10
    :icon-size 15
    :prepend-new true)
  )
)

(defwidget music []
  (box 
    :class "music"
    :orientation "h"
    :space-evenly false
    :halign "center"
  {music != "" ? "ðŸŽµ${music}" : ""}))

(defwidget metric [label value onchange]
  (box 
    :orientation "h"
    :class "metric"
    :space-evenly false
  (box :class "label" label)
  (scale 
    :min 0
    :max 101
    :active {onchange != ""}
    :value value
    :onchange onchange))
)


(deflisten music :initial ""
  "playerctl --follow metadata --format '{{trunc(artist,20)}} - {{trunc(title,40)}}' || true")

(defpoll volume :interval "1s"
  "scripts/getvol")

(defpoll time :interval "10s"
  "date '+%H:%M %b %d, %Y'")

(deflisten focused_desktop :initial ""
  "scripts/get_focused_desktop")

(deflisten desktop_list :initial "[]"
  "scripts/get_desktops")

(defvar en_reveal true)
(defvar ru_reveal false)

(defwidget lang[]
  (eventbox
    :class "lang"
    :cursor "pointer"
    :orientation "h"
      (button
        :onclick "setxkbmap -query | grep -q 'us' && setxkbmap ru || setxkbmap us"
        (box
          :space-evenly "false"
          :orientation "h"
          :halign "center"
          (revealer
            :reveal en_reveal
            :transition "slideleft"
            :duration "200ms"
            (label
              :text "ó°¥» en"))
          (revealer
            :reveal ru_reveal
            :transition "slideleft"
            :duration "200ms"
            (label
              :text "ó°¥» ru"))))))

(defwindow bar
  :monitor 0
  :windowtype "dock"
  :geometry (geometry :x "0%"
                      :y "0%"
                      :width "100%"
                      :height "10px"
                      :anchor "top center")
  :reserve (struts :side "top" :distance "4%")
  (bar))
